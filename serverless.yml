service: learnbosnian

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    DYNAMODB_TABLE: ${self:service}-table-${self:provider.stage}
  # Add IAM role statements for DynamoDB access
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt LearnBosnianTable.Arn
            - !Join ['', [!GetAtt LearnBosnianTable.Arn, '/index/*']]

# Add Lambda functions
functions:
  getLessons:
    handler: backend/handlers/getLessons.handler
    events:
      - http:
          path: lessons
          method: get
          cors: true
    environment:
      DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}

  submitQuiz:
    handler: backend/handlers/submitQuiz.handler
    events:
      - http:
          path: quiz/submit
          method: post
          cors: true
    environment:
      DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}

resources:
  Resources:
    # DynamoDB table for lessons, quizzes, and user progress
    LearnBosnianTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-table-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: gsi1pk
            AttributeType: S
          - AttributeName: gsi1sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: gsi1pk
                KeyType: HASH
              - AttributeName: gsi1sk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    # S3 bucket for hosting React frontend
    FrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: learn-bosnian-frontend-${self:provider.stage}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

    # Bucket policy to allow public read access
    FrontendBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref FrontendBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Join ['', [!GetAtt FrontendBucket.Arn, '/*']]

  Outputs:
    DynamoDBTableName:
      Description: Name of the DynamoDB table
      Value: !Ref LearnBosnianTable
      Export:
        Name: ${self:provider.stage}-dynamodb-table-name
    
    DynamoDBTableArn:
      Description: ARN of the DynamoDB table
      Value: !GetAtt LearnBosnianTable.Arn
      Export:
        Name: ${self:provider.stage}-dynamodb-table-arn

    FrontendBucketName:
      Description: Name of the S3 bucket for frontend hosting
      Value: !Ref FrontendBucket
      Export:
        Name: ${self:provider.stage}-frontend-bucket-name
    
    FrontendBucketWebsiteURL:
      Description: Website URL of the S3 bucket
      Value: !GetAtt FrontendBucket.WebsiteURL
      Export:
        Name: ${self:provider.stage}-frontend-website-url

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3001 